// #include <dirent.h>
// #include <limits.h>
// #include <stdio.h>
// #include <stdlib.h>
// #include <string.h>
// #include <sys/mman.h>
// #include <sys/sem.h>
// #include <sys/shm.h>
//
// #include "shared.h"
//
// #define MAX_SIZE (4096 * 10)
//
// STATUS_CODE dir_view(const char *path, char **res, size_t *res_size) {
//     if (path == NULL) {
//         return INPUT_ERROR;
//     }
//
//     const char *start_name = strrchr(path, '/');
//     if (start_name == NULL) {
//         return INPUT_ERROR;
//     }
//
//     const size_t siz = start_name - path;
//     char result[siz + 1];
//     strncpy(result, path, siz);
//     result[siz] = '\0';
//
//     DIR *dirp = NULL; // тек. директория
//     struct dirent *dentry = NULL; // инфа о ней
//
//     if ((dirp = opendir(result)) == NULL) {
//         fprintf(stderr, "opendir ошибка\n");
//         closedir(dirp);
//         return ERROR_OPEN;
//     }
//
//     size_t cap = 30 + 14;
//     char *BUF = malloc(30 + 7 + 7);
//     if (BUF == NULL) {
//         closedir(dirp);
//         return MEMORY_ERROR;
//     }
//     size_t off = 0;
//     off += sprintf(off + BUF, "Сейчас смотрим: %s\n", result);
//
//     while ((dentry = readdir(dirp)) != NULL) {
//         char name[PATH_MAX];
//         snprintf(name, sizeof(name) / sizeof(char), "%s/%s", result, dentry->d_name);
//         const size_t for_add = strlen(name) + 45 + off;
//         if (for_add >= cap) {
//             char *tmp = realloc(BUF, cap + for_add);
//             if (tmp == NULL) {
//                 free(BUF);
//                 closedir(dirp);
//                 return MEMORY_ERROR;
//             }
//             BUF = tmp;
//             cap += for_add;
//         }
//         // printf("%s\n", name);
//         switch (dentry->d_type) {
//             case DT_DIR: {
//                 off += sprintf(BUF + off, "директория: %s ino = %lu\n", name, dentry->d_ino);
//             }
//             break;
//             case DT_REG: {
//                 off += sprintf(BUF + off, "файл: %s ino = %lu\n", name, dentry->d_ino);
//             }
//             break;
//             case DT_LNK: {
//                 off += sprintf(BUF + off, "симв. ссылка: %s ino = %lu\n", name, dentry->d_ino);
//             }
//             break;
//             case DT_UNKNOWN: {
//                 off += sprintf(BUF + off, "?: %s ino = %lu\n", name, dentry->d_ino);
//             }
//             break;
//             case DT_BLK: {
//                 off += sprintf(BUF + off, "диск (блочное устройство): %s ino = %lu\n", name, dentry->d_ino);
//             }
//             break;
//             case DT_CHR: {
//                 off += sprintf(BUF + off, "диск (символьное устройство): %s ino = %lu\n", name, dentry->d_ino);
//             }
//             break;
//             case DT_FIFO: {
//                 off += sprintf(BUF + off, "именнованный канал: %s ino = %lu\n", name, dentry->d_ino);
//             }
//             break;
//             case DT_SOCK: {
//                 off += sprintf(BUF + off, "сокет: %s ino = %lu\n", name, dentry->d_ino);
//             }
//             break;
//             default: {
//                 fprintf(stderr, "err");
//             }
//             break;
//         }
//     }
//     strcpy(*res, BUF);
//     *res_size = strlen(BUF);
//     closedir(dirp);
//     free(BUF);
//     return SUCCESS;
// }
//
// int main(void) {
//     key_t skey, semkey = 0, sizekey = 0, reskey = 0;
//     int shm, sem, size_id, res_id;
//     void *meow;
//     size_t *info = NULL;
//
//     if ((sizekey = ftok(INFO_NAME, 'S')) == -1) {
//         perror("ftok sizekey\n");
//     }
//     if ((skey = ftok(SHM_NAME, 'S')) == -1) {
//         perror("ftok shm\n");
//     }
//     if ((semkey = ftok(SEM_NAME, 'W')) == -1) {
//         perror("ftok sem\n");
//     }
//     if ((reskey = ftok(SHM_RESULT_NAME, 'r')) == -1) {
//         perror("ftok sem\n");
//     }
//     size_id = shmget(sizekey, sizeof(size_t), IPC_CREAT | 0666);
//     if (size_id == -1) {
//         shmctl(size_id, IPC_RMID, NULL);
//         return MEMORY_ERROR;
//     }
//
//     int existing_sem = semget(semkey, 6, 0666);
//     if (existing_sem != -1) {
//         semctl(existing_sem, 0, IPC_RMID);
//     }
//
//
//     sem = semget(semkey, 6, IPC_CREAT | IPC_EXCL | 0666);
//     if (sem == -1) {
//         perror("semget");
//         return SEM_ERR;
//     }
//     {
//         struct semid_ds ds;
//         union semun arg;
//         arg.buf = &ds;
//         if (semctl(sem, 0, IPC_STAT, arg) == -1) {
//             perror("semctl IPC_STAT");
//         } else {
//             printf("Создан набор семафоров, количество элементов: %lu\n",
//                    ds.sem_nsems);
//         }
//     }
//
//     for (size_t i = 0; i < 6; i++) {
//         union semun arg;
//         arg.val = 0;
//         if (semctl(sem, (int) i, SETVAL, arg.val) == -1) {
//             perror("semctl SETVAL CLIENT_IX");
//             return SEM_ERR;
//         }
//     }
//
//     info = shmat(size_id, NULL, 0);
//     if (info == (size_t *) -1) {
//         perror("shmget info\n");
//         return MEMORY_ERROR;
//     }
//     CLEAR(info, sizeof(size_t));
//
//     printf("Сервер запустился!!!\n");
//
//     while (1) {
//         // printf("%d %d %d\n", sem, SERVER_ix, semctl(sem, SERVER_ix, GETVAL, 0));
//         if (SEM_WAIT(sem, SIZE_SERVER_ix) != SUCCESS) {
//             fprintf(stderr, "Ошибка SEM_WAIT SIZE_SERVER_ix\n");
//         }
//
//         // тут живет размер строк, которых мы получили (т.е. тип размер shm client-а
//         const size_t req_size = *info;
//
//         printf("%lu\n", info[0]);
//
//         if (SEM_POST(sem, SIZE_CLIENT_ix) != SUCCESS) {
//             fprintf(stderr, "Ошибка SEM_POST SIZE_CLIENT_ix\n");
//         }
//
//         if (SEM_WAIT(sem, SERVER_ix) != SUCCESS) {
//             fprintf(stderr, "Ошибка SEM_WAIT SERVER_ix\n");
//         }
//
//         if ((shm = shmget(skey, req_size, IPC_CREAT | 0666)) == -1) {
//             perror("shmget data\n");
//             return MEMORY_ERROR;
//         }
//
//         if ((meow = shmat(shm, NULL, 0)) == (void *) -1) {
//             printf("shmat");
//             return MEMORY_ERROR;
//         }
//         // CLEAR(meow, *info);
//
//         const size_t *sPtr = (size_t *) meow;
//         char *mPtr = (char *) meow + sizeof(size_t);
//
//         if (*sPtr == 0) {
//             printf("Сервер получил сигнал завершения. Выход...\n");
//             // } else {
//             size_t off = 0;
//             printf("Сервер начал обработку\n");
//
//             printf("Путей получено = %lu\n", *sPtr);
//             char *res = NULL;
//             size_t res_size = 0;
//             for (size_t i = 0; i < *sPtr; i++) {
//                 char *pre_res = NULL;
//                 size_t len = 0;
//                 printf("path=%s\n", mPtr + off);
//                 if (dir_view(mPtr + off, &pre_res, &len) != SUCCESS) {
//                     perror("dir_view");
//                     return MEMORY_ERROR;
//                 }
//                 // size_t newzis = res_size + len + 1;
//                 char *tmp = (char *) realloc(res, res_size + len + 1);
//                 if (tmp == NULL) {
//                     perror("mem err");
//                     free(res);
//                     free(pre_res);
//                     res = NULL;
//                     return MEMORY_ERROR;
//                 }
//                 res = tmp;
//                 if (res_size == 0) {
//                     strcpy(res, pre_res);
//                 } else {
//                     strcat(res, pre_res);
//                 }
//                 res_size = strlen(res);
//                 free(pre_res);
//                 off += strlen(mPtr + off) + 1;
//             }
//             // }
//
//             if (shmdt(meow) == -1) {
//                 perror("shmdt\n");
//                 return MEMORY_ERROR;
//             }
//             shmctl(shm, IPC_RMID, NULL);
//
//             const size_t res_shm_size = sizeof(size_t) + res_size + 1;
//                 const int test = shmget(reskey, res_shm_size, 0666);
//                 if (test != -1) {
//                     shmctl(test, IPC_RMID, NULL);
//                     printf("qqq");
//                 }
//
//
//             res_id = shmget(reskey, res_shm_size, IPC_CREAT | IPC_EXCL | 0666);
//             if (res_id == -1) {
//                 perror("shmget result");
//                 free(res);
//                 continue;
//             }
//             char *res_at = shmat(res_id, NULL, 0);
//             if (res_at == (void *) -1) {
//                 perror("shmat result");
//                 free(res);
//                 continue;
//             }
//
//             *(size_t *) res_at = res_size;
//             strcpy(res_at + sizeof(size_t), res);
//             free(res);
//
//             if (SEM_POST(sem, SERVER_RES_IX) != SUCCESS) {
//                 fprintf(stderr, "Ошибка SEM_POST SERVER_RES_IX\n");
//             }
//
//             if (SEM_WAIT(sem, CLIENT_RES_IX) != SUCCESS) {
//                 fprintf(stderr, "Ошибка SEM_WAIT CLIENT_RES_IX\n");
//             }
//
//             if (SEM_POST(sem, CLIENT_IX) != SUCCESS) {
//                 fprintf(stderr, "Ошибка SEM_POST CLIENT_IX\n");
//             } else {
//                 printf("Сервер отработал клиента!\n");
//             }
//         }
//
//         if (shmdt(meow) == -1) {
//             printf("shmdt");
//         }
//         // semctl(sem, 0, IPC_RMID);
//
//         return 0;
//     }
// }